
blinking_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000314  08000314  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000314  08000314  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000314  08000314  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000314  08000314  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800031c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000320  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000320  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001434  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000652  00000000  00000000  00021461  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000210  00000000  00000000  00021ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b8  00000000  00000000  00021cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015416  00000000  00000000  00021e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000023f1  00000000  00000000  00037296  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007af73  00000000  00000000  00039687  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b45fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000658  00000000  00000000  000b4678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080002fc 	.word	0x080002fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080002fc 	.word	0x080002fc

0800014c <main>:

#include "main.h"

int main(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

	*(unsigned long*)0x40021018 |= 0x4;
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <main+0x40>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <main+0x40>)
 8000158:	f043 0304 	orr.w	r3, r3, #4
 800015c:	6013      	str	r3, [r2, #0]

	volatile unsigned long i=0;
 800015e:	2300      	movs	r3, #0
 8000160:	607b      	str	r3, [r7, #4]
	  i++; i++; i++;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	3301      	adds	r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	3301      	adds	r3, #1
 800016c:	607b      	str	r3, [r7, #4]
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	3301      	adds	r3, #1
 8000172:	607b      	str	r3, [r7, #4]
	  i=0;
 8000174:	2300      	movs	r3, #0
 8000176:	607b      	str	r3, [r7, #4]

	 *(unsigned long*)0x400108000 |= 0x20;
 8000178:	f44f 1384 	mov.w	r3, #1081344	; 0x108000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f44f 1284 	mov.w	r2, #1081344	; 0x108000
 8000182:	f043 0320 	orr.w	r3, r3, #32
 8000186:	6013      	str	r3, [r2, #0]
	while (1)
 8000188:	e7fe      	b.n	8000188 <main+0x3c>
 800018a:	bf00      	nop
 800018c:	40021018 	.word	0x40021018

08000190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000194:	bf00      	nop
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001a0:	e7fe      	b.n	80001a0 <HardFault_Handler+0x4>

080001a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001a2:	b480      	push	{r7}
 80001a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001a6:	e7fe      	b.n	80001a6 <MemManage_Handler+0x4>

080001a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001ac:	e7fe      	b.n	80001ac <BusFault_Handler+0x4>

080001ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001ae:	b480      	push	{r7}
 80001b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001b2:	e7fe      	b.n	80001b2 <UsageFault_Handler+0x4>

080001b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001dc:	f000 f836 	bl	800024c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80001e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80001ec:	f000 f840 	bl	8000270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000200:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000202:	e003      	b.n	800020c <LoopCopyDataInit>

08000204 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000204:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000206:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000208:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800020a:	3104      	adds	r1, #4

0800020c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800020c:	480a      	ldr	r0, [pc, #40]	; (8000238 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000210:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000212:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000214:	d3f6      	bcc.n	8000204 <CopyDataInit>
  ldr r2, =_sbss
 8000216:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000218:	e002      	b.n	8000220 <LoopFillZerobss>

0800021a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800021c:	f842 3b04 	str.w	r3, [r2], #4

08000220 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000222:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000224:	d3f9      	bcc.n	800021a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000226:	f7ff ffe5 	bl	80001f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800022a:	f000 f843 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022e:	f7ff ff8d 	bl	800014c <main>
  bx lr
 8000232:	4770      	bx	lr
  ldr r3, =_sidata
 8000234:	0800031c 	.word	0x0800031c
  ldr r0, =_sdata
 8000238:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800023c:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000240:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000244:	20000024 	.word	0x20000024

08000248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC1_2_IRQHandler>
	...

0800024c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <HAL_IncTick+0x1c>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	461a      	mov	r2, r3
 8000256:	4b05      	ldr	r3, [pc, #20]	; (800026c <HAL_IncTick+0x20>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4413      	add	r3, r2
 800025c:	4a03      	ldr	r2, [pc, #12]	; (800026c <HAL_IncTick+0x20>)
 800025e:	6013      	str	r3, [r2, #0]
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000000 	.word	0x20000000
 800026c:	20000020 	.word	0x20000020

08000270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	88fb      	ldrh	r3, [r7, #6]
 8000280:	4013      	ands	r3, r2
 8000282:	2b00      	cmp	r3, #0
 8000284:	d006      	beq.n	8000294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000288:	88fb      	ldrh	r3, [r7, #6]
 800028a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800028c:	88fb      	ldrh	r3, [r7, #6]
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f806 	bl	80002a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40010400 	.word	0x40010400

080002a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	2500      	movs	r5, #0
 80002b8:	4e0c      	ldr	r6, [pc, #48]	; (80002ec <__libc_init_array+0x38>)
 80002ba:	4c0d      	ldr	r4, [pc, #52]	; (80002f0 <__libc_init_array+0x3c>)
 80002bc:	1ba4      	subs	r4, r4, r6
 80002be:	10a4      	asrs	r4, r4, #2
 80002c0:	42a5      	cmp	r5, r4
 80002c2:	d109      	bne.n	80002d8 <__libc_init_array+0x24>
 80002c4:	f000 f81a 	bl	80002fc <_init>
 80002c8:	2500      	movs	r5, #0
 80002ca:	4e0a      	ldr	r6, [pc, #40]	; (80002f4 <__libc_init_array+0x40>)
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <__libc_init_array+0x44>)
 80002ce:	1ba4      	subs	r4, r4, r6
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	42a5      	cmp	r5, r4
 80002d4:	d105      	bne.n	80002e2 <__libc_init_array+0x2e>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002dc:	4798      	blx	r3
 80002de:	3501      	adds	r5, #1
 80002e0:	e7ee      	b.n	80002c0 <__libc_init_array+0xc>
 80002e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e6:	4798      	blx	r3
 80002e8:	3501      	adds	r5, #1
 80002ea:	e7f2      	b.n	80002d2 <__libc_init_array+0x1e>
 80002ec:	08000314 	.word	0x08000314
 80002f0:	08000314 	.word	0x08000314
 80002f4:	08000314 	.word	0x08000314
 80002f8:	08000318 	.word	0x08000318

080002fc <_init>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr

08000308 <_fini>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr
